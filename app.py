from flask import Flask, render_template, request, session, redirect, url_for

app = Flask(__name__)
app.secret_key = "replace-with-a-secure-random-string"


@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        answers = {f"Q{i}": request.form.get(f"Q{i}") for i in range(1, 10)}
        q1, q2, q3 = answers["Q1"], answers["Q2"], answers["Q3"]
        q4, q5, q6 = answers["Q4"], answers["Q5"], answers["Q6"]
        q7, q8, q9 = answers["Q7"], answers["Q8"], answers["Q9"]

        # --- メイン判定 ---
        main_result = "積立安定型（インデックスメイン）"

        if q6 == "1倍以下" and q5 == "10%以下":
            main_result = "貯蓄優先型"
        elif q4 == "損をする覚悟もある" and q2 == "1年以内" and q3 == "1日1時間以上":
            main_result = "アクティブチャレンジ型（短期トレード型）"
        elif (q7 == "ある" or q8 == "ある") and q3 == "できるだけ手間かけたくない":
            main_result = "ステーキング運用型（仮想通貨積立・ステーキング）"
        elif (
            q2 in ["3〜9年", "10年以上"]
            and q3 in ["1日1時間以上", "週に数時間"]
            and q4 in ["一時的に下がるのは我慢できる", "損をする覚悟もある"]
        ):
            main_result = "株式アクティブ型（中期〜長期の個別株投資）"
        elif q4 == "損をする覚悟もある" and q7 == "ある" and q3 in ["1日1時間以上", "週に数時間"]:
            main_result = "ハイリスクハイリターン型（仮想通貨トレード型）"
        elif (
            q8 == "ある"
            and q3 in ["1日1時間以上", "週に数時間"]
            and q4 in ["一時的に下がるのは我慢できる", "損をする覚悟もある"]
        ):
            main_result = "テクノロジー志向型（仮想通貨プロジェクト投資・新興市場）"
        elif q9 == "50代以上" and not (
            q1 == "一攫千金" or q4 == "損をする覚悟もある" or q3 == "1日1時間以上"
        ):
            main_result = "積立型（50代以上特別判定）"
        elif main_result == "積立安定型（インデックスメイン）" and q3 in ["1日1時間以上", "週に数時間"]:
            main_result = "積立応用型（高配当株など）"

        # --- サブ判定 ---
        if main_result == "貯蓄優先型":
            sub_result = "積立安定型（インデックスメイン）"
        elif main_result == "アクティブチャレンジ型（短期トレード型）":
            sub_result = "ハイリスクハイリターン型（仮想通貨トレード型）"
        elif main_result == "ステーキング運用型（仮想通貨積立・ステーキング）":
            sub_result = "積立安定型（インデックスメイン）"
        elif main_result == "株式アクティブ型（中期〜長期の個別株投資）":
            sub_result = "積立応用型（高配当株など）"
        elif main_result == "ハイリスクハイリターン型（仮想通貨トレード型）":
            sub_result = "アクティブチャレンジ型（短期トレード型）"
        elif main_result == "テクノロジー志向型（仮想通貨プロジェクト投資・新興市場）":
            sub_result = (
                "ステーキング運用型（仮想通貨積立・ステーキング）"
                if q3 == "できるだけ手間かけたくない"
                else "ハイリスクハイリターン型（仮想通貨トレード型）"
            )
        elif main_result == "積立型（50代以上特別判定）":
            sub_result = (
                "積立安定型（インデックスメイン）" if q3 == "できるだけ手間かけたくない" else "積立応用型（高配当株など）"
            )
        elif main_result == "積立応用型（高配当株など）":
            sub_result = "積立安定型（インデックスメイン）"
        else:
            sub_result = "積立安定型（インデックスメイン）"

        session["main_result"] = main_result
        session["sub_result"] = sub_result

        return redirect(url_for("result_main"))

    return render_template("index.html")


@app.route("/result")
def result_main():
    main_result = session.get("main_result")
    sub_result = session.get("sub_result")
    if not main_result:
        return redirect(url_for("index"))

    descriptions = {
        "貯蓄優先型": "あなたはまず、投資を始める前に「お金をためる力」を育てることが大切です。毎月の収支を見直し、不要なサブスクや衝動買いを控えることで、手元に自由に使える資金を確保できます。この段階ではまだ市場にお金を投入する必要はなく、生活費を安定させながら貯蓄を積み上げること自体が投資の土台になります。例えば、毎月の給料から一定額を自動的に貯金口座に移す「先取り貯金」を取り入れるだけで、無理なく資金を作ることができます。貯蓄の習慣を身につけることで、後に投資を始めた際、焦ることなく長期的に資産を育てる準備が整います。この時期にしっかり土台を作る人ほど、将来的に安定した運用を行いやすく、心の余裕も持てるでしょう。必要資金の目安としては、生活費の3〜6か月分を目標にするのがおすすめです。無理のない範囲で少しずつ積み上げていくことが、将来の大きな安心につながります。",
        "積立安定型（インデックスメイン）": "あなたはS&P500や全世界株式などのインデックスファンドへの積立投資が合っている可能性が高いです。この方法は、株式市場全体に分散して投資するため、個別企業の影響を受けにくく、長期的な資産形成に向いています。積立投資は「毎月一定額を購入し続ける」ことが基本で、相場が下がったときも安く買えるメリットがあります。必要資金は月数百円〜数千円程度から始められ、少額からでも長期で続けることで複利効果を得られます。時間を味方につけることで、数年後には小さな積み重ねが大きな資産へと育っていきます。リスクは比較的低く、株式市場の値動きに一喜一憂せずに済むため、心理的にも安定した運用が可能です。初心者でも無理なく実行でき、投資を習慣化するには最適な方法です。積立安定型は、未来の安心を着実に手に入れるための賢い選択です。",
        "アクティブチャレンジ型（短期トレード型）": "あなたは個別株を中長期で保有して利益を狙うスタイルに適性があります。企業の成長や業績、事業モデルに注目し、自分で選んだ株を持つ楽しみを味わえる投資方法です。必要資金は数千〜数万円から始められ、投資先をしっかり分析することでリスクをコントロールできます。中長期保有によって、企業の成長に応じた株価上昇や配当収入を享受できるのが特徴です。また、株主優待を通じて投資の楽しさを実感できる点も魅力です。株式アクティブ型は、主体的に情報収集や分析を行うことが求められますが、その学びや経験はあなたの投資スキルを高め、資産形成の力になります。選んだ銘柄が成長していく過程を楽しみながら運用できるのが、この型の大きな魅力です。",
        "ステーキング運用型（仮想通貨積立・ステーキング）": "あなたは仮想通貨のステーキングやレンディングを通じて、保有資産から利息のような収益を得るスタイルに適性があります。ステーキングは、特定の暗号資産をブロックチェーンネットワークに預けることで報酬を得る方法で、長期的に資産を増やせる特徴があります。必要資金は数百円〜数千円から始められるものもあり、仮想通貨の価格変動リスクはあるものの（ステーブルコインと呼ばれる価格変動のないコインも存在する）、保有するだけで収益が得られる点が魅力です。レンディングも同様に、資産を貸し出すことで利息を受け取り、安定した収益の積み重ねが可能です。この投資型では、テクノロジーや暗号資産に興味があり、長期的な成長を見据える姿勢が強みになります。価格の変動に一喜一憂せず、じっくり運用することで雪だるま式に資産を増やすことができ、未来の資産形成に大きな力をもたらします。",
        "株式アクティブ型（中期〜長期の個別株投資）": "あなたは個別株を中長期で保有して利益を狙うスタイルに適性があります。企業の成長や業績、事業モデルに注目し、自分で選んだ株を持つ楽しみを味わえる投資方法です。必要資金は数千〜数万円から始められ、投資先をしっかり分析することでリスクをコントロールできます。中長期保有によって、企業の成長に応じた株価上昇や配当収入を享受できるのが特徴です。また、株主優待を通じて投資の楽しさを実感できる点も魅力です。株式アクティブ型は、主体的に情報収集や分析を行うことが求められますが、その学びや経験はあなたの投資スキルを高め、資産形成の力になります。選んだ銘柄が成長していく過程を楽しみながら運用できるのが、この型の大きな魅力です。",
        "ハイリスクハイリターン型（仮想通貨トレード型）": "あなたは仮想通貨の売買などで、大きな利益を狙うスタイルに適性があります。市場の値動きが激しいためリスクは高いですが、成功したときのリターンも大きいのが特徴です。必要資金は数千円からでも始められますが、十分な余剰資金を用意して挑戦することが重要です。価格変動の激しさを楽しみながら、短期間で利益を積み上げる経験ができるのが魅力です。失敗も学びの一部となり、次の投資判断に活かせます。ハイリスクハイリターン型は、挑戦心や直感を活かして、未来の大きな成果をつかむ力を養うスタイルです。大胆に動くことで、投資の面白さや成長の実感を得やすくなります。",
        "テクノロジー志向型（仮想通貨プロジェクト投資・新興市場）": "あなたはベンチャー企業や新興国への投資を通じて、未来の成長市場に参加するスタイルに適性があります。新しい技術や社会を変える可能性のある企業に投資することで、経済的なリターンと同時に、社会への影響を感じることができます。必要資金は十万円程度から始められ、まだ注目されていない分野を支える先行者としての楽しみがあります。高いリスクは伴いますが、その分成功したときのリターンや満足感も大きいです。テクノロジー志向型は、情報収集や先進的な知識を活かして、自分の投資先を選ぶ楽しさを味わえます。未来の変化を先取りし、社会の成長と共に自分の資産も育てられる特別なスタイルです。",
        "積立型（50代以上特別判定）": "あなたはS&P500や全世界株式などのインデックスファンドへの積立投資が合っている可能性が高いです。この方法は、株式市場全体に分散して投資するため、個別企業の影響を受けにくく、長期的な資産形成に向いています。積立投資は「毎月一定額を購入し続ける」ことが基本で、相場が下がったときも安く買えるメリットがあります。必要資金は月数百円〜数千円程度から始められ、少額からでも長期で続けることで複利効果を得られます。時間を味方につけることで、数年後には小さな積み重ねが大きな資産へと育っていきます。リスクは比較的低く、株式市場の値動きに一喜一憂せずに済むため、心理的にも安定した運用が可能です。初心者でも無理なく実行でき、投資を習慣化するには最適な方法です。積立安定型は、未来の安心を着実に手に入れるための賢い選択です。",
        "積立応用型（高配当株など）": "あなたは日本株の中で高配当株や大型株を中心に積立投資をするスタイルに適性があります。株式を選ぶ際は、安定的な業績や配当利回りを意識すると、長期保有のメリットが最大化します。毎月一定金額を積み立てる方法で、株価が下がったときにも安く購入できるため、投資効率を高めることが可能です。必要資金は月1〜5万円程度から始められます。配当収入は再投資することで資産を加速させ、成長性と収益性を両立できます。積立応用型の魅力は「安定基盤の上にリターンを積み重ねる」点にあります。インデックス投資のような安定性を持ちながら、自分で選んだ銘柄で成果を実感できるため、投資の楽しさを体験しやすいです。中長期的な視点で、企業分析や市場動向を学びながら運用することで、経験と資産の両方を着実に積み上げることができます。",
    }

    descriptions2 = {
        "貯蓄優先型": "",
        "積立安定型（インデックスメイン）": "",
        "アクティブチャレンジ型（短期トレード型）": "",
        "ステーキング運用型（仮想通貨積立・ステーキング）": "",
        "株式アクティブ型（中期〜長期の個別株投資）": "",
        "ハイリスクハイリターン型（仮想通貨トレード型）": "",
        "テクノロジー志向型（仮想通貨プロジェクト投資・新興市場）": "",
        "積立型（50代以上特別判定）": "",
        "積立応用型（高配当株など）": "",
    }

    main_desc = descriptions.get(main_result, "")
    sub_desc = descriptions.get(sub_result, "")
    main_desc2 = descriptions2.get(main_result, "")
    sub_desc2 = descriptions2.get(sub_result, "")

    return render_template(
        "result_main.html",
        main_result=main_result,
        sub_result=sub_result,
        main_desc=main_desc,
        sub_desc=sub_desc,
        main_desc2=main_desc2,
        sub_desc2=sub_desc2,
    )

@app.route("/result/books")
def result_books():
    main_result = session.get("main_result")
    sub_result = session.get("sub_result")
    if not main_result:
        return redirect(url_for("index"))
    return render_template(
        "result_books.html", main_result=main_result, sub_result=sub_result
    )


@app.route("/result/start")
def result_start():
    main_result = session.get("main_result")
    sub_result = session.get("sub_result")
    if not main_result:
        return redirect(url_for("index"))
    return render_template(
        "result_start.html", main_result=main_result, sub_result=sub_result
    )


@app.route("/result/learning")
def result_learning():
    main_result = session.get("main_result")
    sub_result = session.get("sub_result")
    if not main_result:
        return redirect(url_for("index"))
    return render_template(
        "result_learning.html", main_result=main_result, sub_result=sub_result
    )


if __name__ == "__main__":
    app.run(debug=True)
